using System;
using System.Linq;
using System.Xml.Linq;
using System.Collections.Generic;

using Microsoft.Xna.Framework;

using Leda.Core;
using Leda.Core.Animation;

namespace Leda.Core.Asset_Management
{
    public sealed class AnimationDataManager
    {
        private static Dictionary<string, AnimationSequence> _sequences;

        public static Dictionary<string, AnimationSequence> Sequences 
        {
            get { if (_sequences == null) { _sequences = new Dictionary<string, AnimationSequence>(); } return _sequences; } 
        }

        public static void AddSequence(string name, AnimationSequence.AnimationSequenceType sequenceType, bool loops)
        {
            AnimationSequence newSequence = new AnimationSequence(sequenceType);
            newSequence.Loops = loops;

            Sequences.Add(name, newSequence);
        }

        public static void AddKeyframe(string sequenceName, IKeyframe newKeyframe)
        {
            AnimationSequence.AnimationSequenceType sequenceTypeFromKeyframe = AnimationSequence.AnimationSequenceType.Transformation;
            if (newKeyframe is SpriteSheetKeyframe) { sequenceTypeFromKeyframe = AnimationSequence.AnimationSequenceType.SpriteSheet; }

            if (!Sequences.ContainsKey(sequenceName)) { AddSequence(sequenceName, sequenceTypeFromKeyframe, false); }

            if (Sequences[sequenceName].SequenceType == sequenceTypeFromKeyframe) { Sequences[sequenceName].Keyframes.Add(newKeyframe); }
        }

        public static void AddSequence(XElement xmlSequenceData)
        {
            string sequenceName = "";
            AnimationSequence.AnimationSequenceType sequenceType = AnimationSequence.AnimationSequenceType.Transformation;

            if (!Sequences.ContainsKey(xmlSequenceData.Attribute("name").Value))
            {
                foreach (AnimationSequence.AnimationSequenceType item in Enum.GetValues(typeof(AnimationSequence.AnimationSequenceType)))
                {
                    if (item.ToString().ToLower().Equals(xmlSequenceData.Attribute("type").Value.Trim().ToLower()))
                    {
                        sequenceName = xmlSequenceData.Attribute("name").Value;
                        sequenceType = item;

                        AddSequence(sequenceName, item, xmlSequenceData.Attribute("loops").Value == "yes");
                        break;
                    }
                }
            }

            if (!string.IsNullOrEmpty(sequenceName))
            {
                foreach (XElement frame in xmlSequenceData.Element("keyframes").Elements())
                {
                    switch (sequenceType)
                    {
                        case AnimationSequence.AnimationSequenceType.Transformation:
                            AddTransformationKeyframe(sequenceName, frame);
                            break;
                        case AnimationSequence.AnimationSequenceType.SpriteSheet:
                            AddSpriteSheetKeyframe(sequenceName, frame);
                            break;
                        case AnimationSequence.AnimationSequenceType.Skeletal:
                            break;
                    }
                }
            }
        }

        private static void AddTransformationKeyframe(string sequenceName, XElement xmlFrameData)
        {
            TransformationKeyframe newKeyframe = new TransformationKeyframe();
            newKeyframe.DurationInMilliseconds = Convert.ToInt32(xmlFrameData.Attribute("duration").Value);
            newKeyframe.TargetRotation = MathHelper.ToRadians(Utility.ToFloat(xmlFrameData.Attribute("rotation").Value));
            newKeyframe.TargetScale = Utility.ToFloat(xmlFrameData.Attribute("scale").Value);

            if (xmlFrameData.Elements("tint").Count() > 0)
            {
                newKeyframe.TargetTint = new Color(
                    Convert.ToByte(xmlFrameData.Element("tint").Attribute("r").Value),
                    Convert.ToByte(xmlFrameData.Element("tint").Attribute("g").Value),
                    Convert.ToByte(xmlFrameData.Element("tint").Attribute("b").Value),
                    Convert.ToByte(xmlFrameData.Element("tint").Attribute("a").Value));
            }
            else
            {
                newKeyframe.TargetTint = Color.White;
            }

            AddKeyframe(sequenceName, newKeyframe);
        }

        private static void AddSpriteSheetKeyframe(string sequenceName, XElement xmlFrameData)
        {
            SpriteSheetKeyframe newKeyframe = new SpriteSheetKeyframe();
            newKeyframe.DurationInMilliseconds = Convert.ToInt32(xmlFrameData.Attribute("duration").Value);
            newKeyframe.SourceArea = new Rectangle(
                Convert.ToInt32(xmlFrameData.Element("sourcearea").Attribute("left").Value),
                Convert.ToInt32(xmlFrameData.Element("sourcearea").Attribute("top").Value),
                Convert.ToInt32(xmlFrameData.Element("sourcearea").Attribute("width").Value),
                Convert.ToInt32(xmlFrameData.Element("sourcearea").Attribute("height").Value));
            newKeyframe.Origin = new Vector2(
                Utility.ToFloat(xmlFrameData.Element("origin").Attribute("x").Value),
                Utility.ToFloat(xmlFrameData.Element("origin").Attribute("y").Value));

            AddKeyframe(sequenceName, newKeyframe);
        }
    }
}
